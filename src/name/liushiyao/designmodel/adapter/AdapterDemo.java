package name.liushiyao.designmodel.adapter;

/**
 * Created by 电子小孩 on 2017/3/7.
 */

/**
 * 适配器模式：是指一个接口转换成客户希望的另外一个接口，该模式使得原本不兼容的类可以一起工作。
 *
 * 适配器模式的分类：
 *      1. 类的适配器模式，采用继承的方法
 *              这类适配器模式就是主要用于单一的为某个类而实现适配的一种模式
 *      2. 对象适配器，采用对象组合的方式
 *              对象适配器模式就是把“源”作为一个对象聚合到适配器类中
 *
 * 适配器模式包含4中角色：
 *      1. 目标抽象角色（Target）：定义客户期待使用的接口
 *      2. 源角色（Adaptee）：需要被适配的接口
 *      3. 适配器角色（Adapter）：用来把源接口转换成符合要求的目标接口的设备
 *      4. 客户端（Client）:使用适配器的用户类
 *
 * 类适配器与对象适配器的区别：
 *      1. 类适配器模式用于针对单一源的适配，由于它的源单一化，代码的实现不用选择逻辑，很清晰
 *      2. 对象适配器模式则可用于多源的适配，弥补了类适配器的不足，使得原本用类适配器模式需要
 *              写很多适配器情况不复存在。弱点是由于源的数目可以较多，所以具体实现的条件选择分支较多，不太清晰。
 *
 * ***默认适配器模式***：当我们想实现一个接口，但又不想实现所有接口的方法，而只想实现一些部分方法时，就可以使用
 *                              默认适配器模式。他的方法是在接口和具体实现类之间添加一个抽象类，而用抽象类实现目标接口的所有方法
 *                              而具体的实现类只需要覆盖所需的方法即可。
 *
 *
 */
public class AdapterDemo {

        public static void main ( String[] args ) {

        }

}
